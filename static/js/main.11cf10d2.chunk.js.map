{"version":3,"sources":["images/01.jpg","images/02.jpg","images/03.jpg","images/04.jpg","images/05.jpg","images/06.jpg","images/08.jpg","images/09.jpg","images/10.jpg","components/slideshow/slideshow.js","App.slideshow.js","components/slideshow-gallery/slideshow-gallery.js","App.slideshow-gallery.js","components/modal-image/modal-image.js","App.modal-image.js","components/lightbox/lightbox.js","App.lightbox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Slideshow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","slideIndex","ratioWHArray","ratio","split","ratioWH","backward","bind","assertThisInitialized","forward","setSlideIndex","getNewSlideIndex","updateDimensions","runAutomatic","step","numberSlide","input","length","newSlideIndex","setState","index","containerElm","style","height","concat","offsetWidth","_this2","rootElm","ReactDOM","findDOMNode","querySelector","window","addEventListener","mode","timeout","automaticInterval","setInterval","Number","parseInt","removeEventListener","clearInterval","_this3","react_default","a","createElement","className","map","image","key","src","alt","caption","onClick","_","React","Component","collection","img1","img2","img3","img4","img5","img6","SlideshowApp","slideshow_Slideshow","href","SlideshowGallery","containerBottomElm","width","App","slideshow_gallery_SlideshowGallery","ModalImage","showModal","hideModal","modalElm","display","imageElm","modal_image_ModalImage","img8","img9","LightBox","slideshowGallery","createRef","current","visibility","ref","img10","lightbox_LightBox","history","createHistory","basename","process","console","log","Router","Switch","Route","exact","path","component","SlideshowGalleryApp","ModalImageApp","LightBoxApp","Boolean","location","hostname","match","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11cf10d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/01.4dedc228.jpg\";","module.exports = __webpack_public_path__ + \"static/media/02.b25a2ec0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/03.cf95d594.jpg\";","module.exports = __webpack_public_path__ + \"static/media/04.d66c4395.jpg\";","module.exports = __webpack_public_path__ + \"static/media/05.0d563a91.jpg\";","module.exports = __webpack_public_path__ + \"static/media/06.a0a6badb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/08.075ab7df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/09.6089d193.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.9a4234ad.jpg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './slideshow.css';\r\n\r\nexport default class Slideshow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /* \r\n    * State slideIndex dùng để xác định xem slide nào đang được active. \r\n    * Các ảnh sẽ được xếp chồng lên nhau, cái nào active thì hiển thị,\r\n    * Cái nào không active thì ẩn đi.\r\n    */\r\n    this.state = {\r\n      slideIndex: 0\r\n    };\r\n\r\n    /*\r\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\r\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\r\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước. \r\n    */\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n\r\n    this.backward = this.backward.bind(this);\r\n    this.forward = this.forward.bind(this);\r\n    this.setSlideIndex = this.setSlideIndex.bind(this);\r\n    this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.runAutomatic = this.runAutomatic.bind(this);\r\n  }\r\n\r\n  /*\r\n  * Tính chỉ số SlideIndex mới, với step là bước nhảy: +1 hoặc -1\r\n  * Giả sử, mình có 6 ảnh => các chỉ số lần lượt là: 0, 1, 2,...5\r\n  * Chú ý:\r\n  * Nếu đang ở chỉ số 5 mà đi về phía trước thì slideIndex = 0\r\n  * Nếu đang ở chỉ số 0 mà về sau thì slideIndex = 5\r\n  */\r\n  getNewSlideIndex(step) {\r\n    const slideIndex = this.state.slideIndex;\r\n    const numberSlide = this.props.input.length;\r\n\r\n    let newSlideIndex = slideIndex + step;\r\n\r\n    if (newSlideIndex >= numberSlide) newSlideIndex = 0;\r\n    else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\r\n\r\n    return newSlideIndex;\r\n  }\r\n\r\n  // Quay về ảnh phía trước, tức index giảm 1 => step = -1\r\n  backward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(-1)\r\n    });\r\n  }\r\n\r\n  // Tiến tới ảnh phía sau, tức index tăng 1 => step = 1\r\n  forward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  // Xác định slideIndex nào sẽ được active\r\n  setSlideIndex(index) {\r\n    this.setState({\r\n      slideIndex: index\r\n    })\r\n  }\r\n\r\n  /*\r\n  * Cập nhật chiều cao cho container khi thay đổi kích thước màn hình\r\n  * Trong phần CSS, mình để container có width = 100%,\r\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100%\r\n  * Nhưng chiều cao phải tính lại dựa vào width và tỉ lệ this.ratioWH\r\n  */\r\n  updateDimensions() {\r\n    this.containerElm.style.height = `${this.containerElm.offsetWidth / this.ratioWH}px`;\r\n  }\r\n\r\n  /*\r\n  * Nếu người dùng truyền vào thuộc tính mode = automatic \r\n  * thì Slideshow sẽ chạy tự động dựa vào interval.\r\n  * Hàm này sẽ được gọi trong mỗi lượt lặp lại \r\n  * để cập nhật slideIndex mới cho Slideshow\r\n  */\r\n  runAutomatic() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  /*\r\n  * Hàm này thuộc về React Component Lifecycle\r\n  * được gọi sau khi component này được render xong \r\n  * Trong đây, sẽ lưu lại reference cho container - this.containerElm\r\n  * Cập nhật lại chiều cao cho container - this.updateDimensions();\r\n  * Đăng ký sự kiện thay đổi kích thước - resize\r\n  * Kiểm tra nếu mode === \"automatic\" thì sẽ tạo mới một interval\r\n  * để thay đổi hình ảnh - this.runAutomatic()\r\n  * với giá trị timeout được truyền từ props hoặc mặc định là 5000 ms\r\n  */\r\n  componentDidMount() {\r\n    this.rootElm = ReactDOM.findDOMNode(this);\r\n    this.containerElm = this.rootElm.querySelector(\".container\");\r\n\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n\r\n    if (this.props.mode === \"automatic\") {\r\n      const timeout = this.props.timeout || 5000;\r\n\r\n      this.automaticInterval = setInterval(\r\n        () => this.runAutomatic(), \r\n        Number.parseInt(timeout)\r\n      );\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Hàm này cũng thuộc về React Component Lifecycle - \r\n  * được gọi khi component này bị xóa khỏi màn hình\r\n  * Lúc này, mình phải hủy bỏ sự kiện khi resize \r\n  * và xóa bỏ interval đã khai bảo bên trên để tránh leak memory.\r\n  */\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\r\n  }\r\n\r\n  /*\r\n  * Giao diện của component\r\n  * với phần tử ngoài cùng mình để className=\"lp-slideshow\" \r\n  * để tránh xung đột về tên với các component khác\r\n  */\r\n  render() {\r\n    return (\r\n      <div className=\"lp-slideshow\">\r\n        <div className=\"container\">\r\n          {\r\n            this.props.input.map((image, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={`slide ${this.state.slideIndex === index ? \"active\" : \"\"}`}\r\n                >\r\n                  <div className=\"number-text\">{`${index + 1} / ${this.props.input.length}`}</div>\r\n                  <img className=\"image\" src={image.src} alt={image.caption} />\r\n                  <div className=\"caption-text\">{image.caption}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n\r\n          <span className=\"prev\" onClick={this.backward}>&#10094;</span>\r\n          <span className=\"next\" onClick={this.forward}>&#10095;</span>\r\n        </div>\r\n\r\n        <div className=\"dot-container\">\r\n          {\r\n            this.props.input.map((_, index) => {\r\n              return (\r\n                <span\r\n                  key={index}\r\n                  className={`dot ${this.state.slideIndex === index ? \"active\" : \"\"}`}\r\n                  onClick={() => this.setSlideIndex(index)}\r\n                >\r\n                </span>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Slideshow from './components/slideshow/slideshow';\r\nimport img1 from './images/01.jpg';\r\nimport img2 from './images/02.jpg';\r\nimport img3 from './images/03.jpg';\r\nimport img4 from './images/04.jpg';\r\nimport img5 from './images/05.jpg';\r\nimport img6 from './images/06.jpg';\r\n\r\nconst collection = [\r\n  { src: img1, caption: \"Caption one\" },\r\n  { src: img2, caption: \"Caption two\" },\r\n  { src: img3, caption: \"Caption three\" },\r\n  { src: img4, caption: \"Caption four\" },\r\n  { src: img5, caption: \"Caption five\" },\r\n  { src: img6, caption: \"Caption six\" },\r\n];\r\n\r\nexport default class SlideshowApp extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>Slideshow</h2>\r\n\r\n        <Slideshow \r\n          input={collection}  \r\n          ratio={`3:2`}\r\n          mode={`manual`}\r\n        />\r\n\r\n        <Slideshow \r\n          input={collection}  \r\n          ratio={`3:2`}\r\n          mode={`automatic`}\r\n          timeout={`3000`}\r\n        />\r\n\r\n        <div>\r\n          Made by <a href=\"https://about.phamvanlam.com/\">Lam Pham</a>. \r\n          Visit me at <a href=\"https://completejavascript.com/\">completejavascript.com</a>.\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './slideshow-gallery.css';\r\n\r\nexport default class SlideshowGallery extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    /* \r\n    * State slideIndex dùng để xác định xem slide nào đang được active. \r\n    * Các ảnh sẽ được xếp chồng lên nhau, cái nào active thì hiển thị,\r\n    * Cái nào không active thì ẩn đi.\r\n    */\r\n    this.state = {\r\n      slideIndex: 0\r\n    };\r\n\r\n    /*\r\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\r\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\r\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước. \r\n    */\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n\r\n    this.backward = this.backward.bind(this);\r\n    this.forward = this.forward.bind(this);\r\n    this.setSlideIndex = this.setSlideIndex.bind(this);\r\n    this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.runAutomatic = this.runAutomatic.bind(this);\r\n  }\r\n\r\n  /*\r\n  * Tính chỉ số SlideIndex mới, với step là bước nhảy: +1 hoặc -1\r\n  * Giả sử, mình có 6 ảnh => các chỉ số lần lượt là: 0, 1, 2,...5\r\n  * Chú ý:\r\n  * Nếu đang ở chỉ số 5 mà đi về phía trước thì slideIndex = 0\r\n  * Nếu đang ở chỉ số 0 mà về sau thì slideIndex = 5\r\n  */\r\n  getNewSlideIndex(step) {\r\n    const slideIndex = this.state.slideIndex;\r\n    const numberSlide = this.props.input.length;\r\n\r\n    let newSlideIndex = slideIndex + step;\r\n\r\n    if (newSlideIndex >= numberSlide) newSlideIndex = 0;\r\n    else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\r\n\r\n    return newSlideIndex;\r\n  }\r\n  \r\n  // Quay về ảnh phía trước, tức index giảm 1 => step = -1\r\n  backward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(-1)\r\n    });\r\n  }\r\n\r\n  // Tiến tới ảnh phía sau, tức index tăng 1 => step = 1\r\n  forward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  // Xác định slideIndex nào sẽ được active\r\n  setSlideIndex(index) {\r\n    this.setState({\r\n      slideIndex: index\r\n    })\r\n  }\r\n\r\n  /*\r\n  * Cập nhật chiều cao cho container khi thay đổi kích thước màn hình\r\n  * Trong phần CSS, mình để container có width = 100%,\r\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100% kích thước parent.\r\n  * Nhưng chiều cao là giá trị tuyệt đối nên phải tính lại, \r\n  * dựa vào width và tỉ lệ this.ratioWH = width / height\r\n  * \r\n  * Chú ý: ví dụ Slideshow Gallery này khác với ví dụ Slideshow thông thường\r\n  * ở chỗ là mình thay những chấm tròn ở dưới thành dãy các ảnh.\r\n  * Vì vậy, mình cũng phải tính lại chiều cao của phần đó - this.containerBottomElm.\r\n  * \r\n  * Ngoài ra, số lượng ảnh ở phía dưới là this.props.input.length chứ không phải 1 ảnh\r\n  * nên mình phải chia cho this.props.input.length - đây là phần khác so với\r\n  * khi tính toán với this.containerElm\r\n  */\r\n  updateDimensions() {\r\n    this.containerElm.style.height = `${this.containerElm.offsetWidth / this.ratioWH}px`;\r\n    this.containerBottomElm.style.height = `${this.containerBottomElm.offsetWidth / this.props.input.length / this.ratioWH}px`;\r\n  }\r\n\r\n  /*\r\n  * Nếu người dùng truyền vào thuộc tính mode = automatic \r\n  * thì Slideshow Gallery sẽ chạy tự động dựa vào interval.\r\n  * Hàm này sẽ được gọi trong mỗi lượt lặp lại \r\n  * để cập nhật slideIndex mới cho Slideshow Gallery\r\n  */\r\n  runAutomatic() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  /*\r\n  * Hàm này thuộc về React Component Lifecycle\r\n  * được gọi sau khi component này được render xong \r\n  * Trong đây, sẽ lưu lại reference cho container - this.containerElm\r\n  * Cập nhật lại chiều cao cho container - this.updateDimensions();\r\n  * Đăng ký sự kiện thay đổi kích thước - resize\r\n  * Kiểm tra nếu mode === \"automatic\" thì sẽ tạo mới một interval\r\n  * để thay đổi hình ảnh - this.runAutomatic()\r\n  * với giá trị timeout được truyền từ props hoặc mặc định là 5000 ms\r\n  */\r\n  componentDidMount() {\r\n    this.rootElm = ReactDOM.findDOMNode(this);\r\n    this.containerElm = this.rootElm.querySelector(\".container\");\r\n    this.containerBottomElm = this.rootElm.querySelector(\".container-bottom\");\r\n\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n\r\n    if (this.props.mode === \"automatic\") {\r\n      const timeout = this.props.timeout || 5000;\r\n\r\n      this.automaticInterval = setInterval(\r\n        () => this.runAutomatic(), \r\n        Number.parseInt(timeout)\r\n      );\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Hàm này cũng thuộc về React Component Lifecycle - \r\n  * được gọi khi component này bị xóa khỏi màn hình\r\n  * Lúc này, mình phải hủy bỏ sự kiện khi resize \r\n  * và xóa bỏ interval đã khai bảo bên trên để tránh leak memory.\r\n  */\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"lp-slideshow-gallery\">\r\n        <div className=\"container\">\r\n          {\r\n            this.props.input.map((image, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={`slide ${this.state.slideIndex === index ? \"active\" : \"\"}`}\r\n                >\r\n                  <div className=\"number-text\">{`${index + 1} / ${this.props.input.length}`}</div>\r\n                  <img className=\"image\" src={image.src} alt={image.caption} />\r\n                  <div className=\"caption-text\">{image.caption}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n\r\n          <span className=\"prev\" onClick={this.backward}>&#10094;</span>\r\n          <span className=\"next\" onClick={this.forward}>&#10095;</span>\r\n        </div>\r\n\r\n        <div className=\"container-bottom\">\r\n          {\r\n            this.props.input.map((image, index) => {\r\n              return (\r\n                <img\r\n                  key={index}\r\n                  src={image.src} \r\n                  alt={image.caption}\r\n                  className={`image ${this.state.slideIndex === index ? \"active\" : \"\"}`}\r\n                  onClick={() => this.setSlideIndex(index)}\r\n                  style={{\r\n                    width: `${1 / this.props.input.length * 100}%`,\r\n                    height: `100%`\r\n                  }}\r\n                />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport SlideshowGallery from './components/slideshow-gallery/slideshow-gallery';\r\nimport img1 from './images/01.jpg';\r\nimport img2 from './images/02.jpg';\r\nimport img3 from './images/03.jpg';\r\nimport img4 from './images/04.jpg';\r\nimport img5 from './images/05.jpg';\r\nimport img6 from './images/06.jpg';\r\n\r\nconst collection = [\r\n  { src: img1, caption: \"Caption one\" },\r\n  { src: img2, caption: \"Caption two\" },\r\n  { src: img3, caption: \"Caption three\" },\r\n  { src: img4, caption: \"Caption four\" },\r\n  { src: img5, caption: \"Caption five\" },\r\n  { src: img6, caption: \"Caption six\" },\r\n];\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>Slideshow Gallery</h2>\r\n        \r\n        <SlideshowGallery\r\n          input={collection}  \r\n          ratio={`3:2`}\r\n          mode={`manual`}\r\n        />\r\n\r\n        <SlideshowGallery\r\n          input={collection}  \r\n          ratio={`3:2`}\r\n          mode={`automatic`}\r\n          timeout={`3000`}\r\n        />\r\n\r\n        <div>\r\n          Made by <a href=\"https://about.phamvanlam.com/\">Lam Pham</a>. \r\n          Visit me at <a href=\"https://completejavascript.com/\">completejavascript.com</a>.\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './modal-image.css';\r\n\r\nexport default class ModalImage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    /*\r\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\r\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\r\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước. \r\n    */\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.showModal = this.showModal.bind(this);\r\n    this.hideModal = this.hideModal.bind(this);\r\n  }\r\n\r\n  /** \r\n   * Hiển thị Modal Image bằng cách set giá trị \r\n   * cho thuộc tính display của style, \r\n   * của phần tử đóng vai trò là Modal Image là \"initial\",\r\n   * để hiển thị nó\r\n  */\r\n  showModal() {\r\n    this.modalElm.style.display = \"initial\";\r\n  }\r\n\r\n  /** \r\n   * Ẩn ảnh Modal Image bằng cách set giá trị\r\n   * cho thuộc tính display của style,\r\n   * của phần tử đóng vai trò là Modal Image là \"none\",\r\n   * để ẩn nó đi\r\n  */\r\n  hideModal() {\r\n    this.modalElm.style.display = \"none\";\r\n  }\r\n\r\n  /*\r\n  * Cập nhật chiều cao cho mỗi ảnh khi thay đổi kích thước màn hình\r\n  * Trong phần CSS, mình để mỗi ảnh có width = 100%,\r\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100% kích thước parent.\r\n  * Nhưng chiều cao là giá trị tuyệt đối nên phải tính lại, \r\n  * dựa vào width và tỉ lệ this.ratioWH = width / height\r\n  */\r\n  updateDimensions() {\r\n    this.imageElm.style.height = `${this.imageElm.offsetWidth / this.ratioWH}px`;\r\n  }\r\n\r\n  /** \r\n   * Hàm này được gọi khi Modal Image đã render lên HTML.\r\n   * Trong này mình sẽ lưu lại DOM node ứng với các phần tử \r\n   *   + this.rootElm -> toàn bộ component\r\n   *   + this.imageElm -> phiên bản ảnh nhỏ, hiển thị lúc đầu\r\n   *   + this.modalElm -> phiên bản ảnh lớn, modal image\r\n   * \r\n   * Tiếp theo, gọi hàm this.updateDimensions() để cập nhật chiều cao\r\n   * cho ảnh nhỏ ban đầu.\r\n   * \r\n   * Và cuối cùng là đăng ký sự kiên resize màn hình, với hàm xử lý \r\n   * là updateDimensions(). Tức là mỗi khi thay đổi kích thước màn hình\r\n   * thì sẽ tính lại chiều cao.\r\n  */\r\n  componentDidMount() {\r\n    this.rootElm = ReactDOM.findDOMNode(this);\r\n    this.imageElm = this.rootElm.querySelector(\".image\");\r\n    this.modalElm = this.rootElm.querySelector(\".modal\");\r\n\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n  /** \r\n   * Hàm này được gọi khi Component bị xóa khỏi HTML.\r\n   * Lúc này mình phải hủy bỏ sự kiện đã đăng ký lúc trước.\r\n  */\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"lp-modal-image\">\r\n        <img \r\n          className=\"image\" \r\n          src={this.props.src} \r\n          alt={this.props.alt} \r\n          onClick={this.showModal}\r\n        />\r\n        \r\n        <div className=\"modal\">\r\n          <span className=\"close\" onClick={this.hideModal}>&times;</span>\r\n          <img className=\"modal-content\" src={this.props.src} alt={this.props.alt + \" modal\"} />\r\n          <div className=\"caption\">{this.props.alt}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport ModalImage from './components/modal-image/modal-image';\r\nimport img8 from './images/08.jpg';\r\nimport img9 from './images/09.jpg';\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>Image Modal</h2>\r\n        <p>Click the image below to show the modal.</p>\r\n\r\n        <div \r\n          style={{\r\n            display: `flex`\r\n          }}\r\n        >\r\n          <ModalImage\r\n            src={img8}\r\n            alt={`This is one of beautiful girls`}\r\n            ratio={`3:2`}\r\n          />\r\n          <ModalImage\r\n            src={img9}\r\n            alt={`This is also one of beautiful girls`}\r\n            ratio={`3:2`}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          Made by <a href=\"https://about.phamvanlam.com/\">Lam Pham</a>.\r\n          Visit me at <a href=\"https://completejavascript.com/\">completejavascript.com</a>.\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './lightbox.css';\r\nimport SlideshowGallery from '../slideshow-gallery/slideshow-gallery';\r\n\r\nexport default class LightBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Tạo reference ứng với Slideshow Gallery\r\n    this.slideshowGallery = React.createRef();\r\n\r\n    /*\r\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\r\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\r\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước. \r\n    */\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.showModal = this.showModal.bind(this);\r\n    this.hideModal = this.hideModal.bind(this);\r\n  }\r\n\r\n  /** \r\n   * Hiển thị Slideshow Gallery như Modal \r\n   * bằng cách set giá trị cho thuộc tính visibility của style, \r\n   * của phần tử đóng vai trò là Modal là \"visible\" để hiển thị nó\r\n   * \r\n   * Ngoài ra, khi hiển thị Slidshow Gallery lên, \r\n   * mình phải gọi phương thức setSlideIndex() \r\n   * để xác định ảnh nào đang được active\r\n  */\r\n  showModal(index) {\r\n    this.slideshowGallery.current.setSlideIndex(index);\r\n    this.modalElm.style.visibility = \"visible\";\r\n  }\r\n\r\n  /** \r\n   * Ẩn phần tử Slideshow Gallery đi bằng cách set giá trị\r\n   * cho thuộc tính visibility của style,\r\n   * của phần tử đóng vai trò là Modal Image là \"hidden\",\r\n   * để ẩn nó đi\r\n  */\r\n  hideModal() {\r\n    this.modalElm.style.visibility = \"hidden\";\r\n  }\r\n\r\n  /*\r\n  * Cập nhật chiều cao cho mỗi ảnh khi thay đổi kích thước màn hình\r\n  * Trong phần CSS, mình để mỗi ảnh có width = 100%,\r\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100% kích thước parent.\r\n  * Nhưng chiều cao là giá trị tuyệt đối nên phải tính lại, \r\n  * dựa vào width và tỉ lệ this.ratioWH = width / height\r\n  * \r\n  * Ngoài ra, số lượng ảnh ban đầu là this.props.input.length chứ không phải 1 ảnh\r\n  * nên mình phải chia cho this.props.input.length \r\n  */\r\n  updateDimensions() {\r\n    this.containerElm.style.height = `${this.containerElm.offsetWidth / this.props.input.length / this.ratioWH}px`;\r\n  }\r\n\r\n  /** \r\n   * Hàm này được gọi khi Lightbox đã render lên HTML.\r\n   * Trong này mình sẽ lưu lại DOM node ứng với các phần tử \r\n   *   + this.rootElm -> toàn bộ component\r\n   *   + this.containerElm -> container chứa các ảnh phiên bản nhỏ, hiển thị lúc đầu\r\n   *   + this.modalElm -> chứa thành phần là modal - slideshow gallery\r\n   * \r\n   * Tiếp theo, gọi hàm this.updateDimensions() để cập nhật chiều cao\r\n   * cho ảnh nhỏ ban đầu.\r\n   * \r\n   * Và cuối cùng là đăng ký sự kiên resize màn hình, với hàm xử lý \r\n   * là updateDimensions(). Tức là mỗi khi thay đổi kích thước màn hình\r\n   * thì sẽ tính lại chiều cao.\r\n  */\r\n  componentDidMount() {\r\n    this.rootElm = ReactDOM.findDOMNode(this);\r\n    this.containerElm = this.rootElm.querySelector(\".container\");\r\n    this.modalElm = this.rootElm.querySelector(\".modal\");\r\n\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n  /** \r\n   * Hàm này được gọi khi Component bị xóa khỏi HTML.\r\n   * Lúc này mình phải hủy bỏ sự kiện đã đăng ký lúc trước.\r\n  */\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n  /** \r\n   * Chú ý: thành phần bên trong phần Modal bây giờ không chỉ\r\n   * là một ảnh như Modal Image.\r\n   * \r\n   * Mà trong đó, mình truyền vào Slideshow Gallery Component\r\n  */\r\n  render() {\r\n    return (\r\n      <div className=\"lp-lightbox\">\r\n        <div className=\"container\">\r\n          {\r\n            this.props.input.map((image, index) => {\r\n              return (\r\n                <div \r\n                  key={index}\r\n                  className=\"image-wrapper\" \r\n                  style={{ width: `${1 / this.props.input.length * 100}%`, height: `100%` }}\r\n                >\r\n                  <img\r\n                    className=\"image\"\r\n                    src={image.src}\r\n                    alt={image.caption}\r\n                    onClick={() => this.showModal(index)}\r\n                  />\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n\r\n        <div className=\"modal\">\r\n          <span className=\"close\" onClick={this.hideModal}>&times;</span>\r\n          <div className=\"modal-content\">\r\n            <SlideshowGallery \r\n              ref={this.slideshowGallery}\r\n              input={this.props.input}  \r\n              ratio={this.props.ratio}\r\n              mode={`manual`}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport LightBox from './components/lightbox/lightbox';\r\nimport img8 from './images/08.jpg';\r\nimport img9 from './images/09.jpg';\r\nimport img10 from './images/10.jpg';\r\n\r\nconst collection = [\r\n  { src: img8, caption: \"Caption eight\" },\r\n  { src: img9, caption: \"Caption nine\" },\r\n  { src: img10, caption: \"Caption ten\" },\r\n];\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>LightBox</h2>\r\n        <p>Click on each image below to show the modal.</p>\r\n\r\n        <LightBox \r\n          input={collection}  \r\n          ratio={`3:2`}\r\n        />\r\n\r\n        <div>\r\n          Made by <a href=\"https://about.phamvanlam.com/\">Lam Pham</a>. \r\n          Visit me at <a href=\"https://completejavascript.com/\">completejavascript.com</a>.\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport createHistory from 'history/createBrowserHistory';\r\n\r\nimport SlideshowApp from './App.slideshow';\r\nimport SlideshowGalleryApp from './App.slideshow-gallery';\r\nimport ModalImageApp from './App.modal-image';\r\nimport LightBoxApp from './App.lightbox';\r\n\r\nconst history = createHistory({\r\n  basename: process.env.PUBLIC_URL,\r\n});\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    console.log(\"basename 1\", process.env.PUBLIC_URL);\r\n    \r\n    return (\r\n      <Router className=\"App\" history={history}>\r\n        <Switch>\r\n          <Route exact path=\"/slideshow/\" component={SlideshowApp} />\r\n          <Route exact path=\"/slideshow-gallery/\" component={SlideshowGalleryApp} />\r\n          <Route exact path=\"/modal-image/\" component={ModalImageApp} />\r\n          <Route exact path=\"/lightbox/\" component={LightBoxApp} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}